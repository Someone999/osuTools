<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSharp Class</name>
    </assembly>
    <members>
        <member name="M:WinAPI.Tool.CreateToolhelp32Snapshot(WinAPI.Tool.SnapshotType,System.Int32)">
            <summary>
            获取指定的快照
            </summary>
            <param name="type"></param>
            <param name="PID">当SnapshotType为进程加载的元素时，必须指定PID</param>
            <returns></returns>
        </member>
        <member name="M:WinAPI.ErrorHandle.SetLastError(System.UInt32)">
             <summary>
            设置LastError的值。
             </summary>
             <param name="dwErrorCode">指定的Error整数</param>
        </member>
        <member name="F:WinAPI.ErrorHandle.FormatMessageFlags.AllocateBuffer">
            <summary>
            函数将分配一个足够大的缓冲区存储格式化后的信息，并置一个指向lpBuffer的指针。lpBuffer指向的必须是一个双字节(Unicode，wchar_t)字符串指针。如果指定了该选项，函数会自动释放内存空间。
            </summary>
        </member>
        <member name="M:WinAPI.ErrorHandle.LocalFree(HandleTypes.Address)">
            <summary>
            如果成功，函数返回NULL，否则返回addr
            </summary>
            <param name="addr"></param>
            <returns></returns>
        </member>
        <member name="F:WinAPI.Handle.HandleInfoFlag.Inherit">
            <summary>
            指示句柄是否可继承
            </summary>
        </member>
        <member name="F:WinAPI.Handle.HandleInfoFlag.ProtectFromClose">
            <summary>
            指定在调用CloseHandle是否能够关闭句柄
            </summary>
        </member>
        <member name="M:WinAPI.Handle.CloseHandle(System.IntPtr)">
            <summary>
            关闭一个句柄
            </summary>
            <param name="hHandle">要关闭的句柄</param>
            <returns>句柄是否关闭</returns>
        </member>
        <member name="M:WinAPI.Handle.SetHandleInformation(System.IntPtr,WinAPI.Handle.HandleInfoFlag,WinAPI.Handle.HandleInfoFlagSwitch)">
            <summary>
            设置一个句柄的信息
            </summary>
            <param name="hObj">要设置的句柄</param>
            <param name="flag">信息</param>
            <param name="flagSwitch">指定的开关必须与之前的值匹配</param>
            <returns></returns>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.BreakawayFromJob">
            <summary>
            如果指定该选项，与Job关联的子进程不再与Job关联。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.DefaultErrorMode">
            <summary>
            如果指定该选项，新进程的错误模式将被设为默认值，而不是继承于父进程。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.NewConsoleWindow">
            <summary>
            创建一个新的控制台窗口。该选项不能与DeattachProcess一起使用。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.NewProcessGroup">
            <summary>
            创建一个新的进程组，创建的进程将成为该组的根进程。如果指定了NewConsoleWindow选项，该选项将被忽略。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.NoWindow">
            <summary>
            进程启动后不显示控制台窗口。如果指定了NewConsoleWindow选项和DeattachedProcess选项，或者启动的程序不是控制台窗口程序，该选项将被忽略。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.ProtectedProcess">
            <summary>
            说明该进程及其子进程和其子线程是被保护的。如果指定了该选项，系统将限制对该进程的子进程及子线程的访问权限。Windows Server 2003和Windows XP不支持该选项。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.PreserveCodeAuthorizeLevel">
            <summary>
            允许调用方绕过默认限制调用子进程。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.SecureProcess">
            <summary>
            该选项允许基于虚拟化的安全环境的进程运行。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.SeparateWowVDM">
            <summary>
            该选项仅对基于16位的可执行程序有效。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.SharedWowVDM">
            <summary>
            该选项仅对基于16位的可执行程序有效。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.Suspended">
            <summary>
            如果指定该选项，被创建进程的主线程将被暂停执行，需要之后调用ResumeThread恢复其主线程的运行。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.UnicodeEnvironment">
            <summary>
            如果指定该选项，lpEnvironment指向的环境块将使用Unicode字符集，否则使用Ansi字符集。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.DebugOnlyThisProcess">
            <summary>
            如果指定该选项，调用线程将会启动并调试该进程，所有相关的调试信息可以通过WaitForDebugEvent获取。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.DebugProcess">
            <summary>
            如果指定该选项，调用线程将会启动并调试该进程,该进程的所有子进程将会由一个新进程启动。所有相关的调试信息可以通过WaitForDebugEvent获取。如果同时指定了DebugOnlyThisProcess，新进程的子进程将不会被调用线程调试。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.DeattchedProcess">
            <summary>
            仅用于控制台窗口程序。新进程不继承其父进程的控制台(默认值)。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.ExtendedStartupInfoPresent">
            <summary>
            使用额外的启动信息来启动该进程，在参数lpStartupInfo处的结构体的类型必须为STARTUPINFOEX。
            </summary>
        </member>
        <member name="F:WinAPI.Process.ProcessCreationFlags.InheritParentAffinity">
            <summary>
            如果指定该选项，子进程将会继承父进程的进程，线程关系。
            </summary>
        </member>
        <member name="F:WinAPI.RemoteProcess.AllocationType.LargePages">
            <summary>
            如果使用了这个值，必须同时使用Commit|Reserve
            </summary>
        </member>
        <member name="F:WinAPI.RemoteProcess.AllocationType.Physical">
            <summary>
            如果使用了这个值，必须同时使用Reserve
            </summary>
        </member>
        <member name="F:WinAPI.structs.STARTUPINFOA.cb">
            <summary>
            请在使用时将cb设置为Marshal.SizeOf&lt;STARTUPINFOA&gt;()
            </summary>
        </member>
        <member name="T:Win32Class.SevenZip">
            <summary>
            使用7-Zip实现
            </summary>
        </member>
        <member name="T:Win32Class.SevenZip.Native.Operation">
            <summary>
            对压缩文件进行的操作
            </summary>
        </member>
        <member name="F:Win32Class.SevenZip.Native.Operation.Add">
            <summary>
            添加文件到压缩包
            </summary>
        </member>
        <member name="F:Win32Class.SevenZip.Native.Operation.Delete">
            <summary>
            从压缩包删除文件
            </summary>
        </member>
        <member name="F:Win32Class.SevenZip.Native.Operation.List">
            <summary>
            列举出压缩包中的文件
            </summary>
        </member>
        <member name="F:Win32Class.SevenZip.Native.Operation.Extract">
            <summary>
            将压缩包中的所有文件解压到同一文件夹下
            </summary>
        </member>
        <member name="F:Win32Class.SevenZip.Native.Operation.Test">
            <summary>
            测试压缩包
            </summary>
        </member>
        <member name="F:Win32Class.SevenZip.Native.Operation.Update">
            <summary>
            更新压缩包
            </summary>
        </member>
        <member name="F:Win32Class.SevenZip.Native.Operation.ExtrctWithFullPath">
            <summary>
            按照压缩包中的目录结构解压文件
            </summary>
        </member>
        <member name="T:Win32Class.SevenZip.Native.ArchieveType">
            <summary>
            压缩文件的文件格式
            </summary>
        </member>
        <member name="T:Win32Class.SevenZip.Native.ConCharSet">
            <summary>
            控制台使用的字符集
            </summary>
        </member>
        <member name="T:Win32Class.SevenZip.Native.FileNameCharSet">
            <summary>
            文件名使用的字符集
            </summary>
        </member>
        <member name="T:Win32Class.SevenZip.Native.HashFuncType">
            <summary>
            要使用的Hash函数
            </summary>
        </member>
        <member name="T:Win32Class.SevenZip.Native.SevenZipArgs">
            <summary>
            对压缩包进行操作所需的参数
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.OperationType">
            <summary>
            获取或设置要对压缩文件进行的操作
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.FileType">
            <summary>
            获取或设置压缩文件的类型，默认为文件类型
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.ConsoleCharacterSet">
            <summary>
            获取或设置控制台使用的字符集
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.MultiThread">
            <summary>
            是否使用多线程
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.NumOfThreads">
            <summary>
            获取或设置要使用的线程数量
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.OutputFileName">
            <summary>
            获取或设置输出的文件名或输出目录
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.Password">
            <summary>
            获取或设置压缩包的密码
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.HashFunctionType">
            <summary>
            获取或设置要使用的Hash函数
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.FileCharSet">
            <summary>
            获取或设置文件名的字符集
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.CharSetID">
            <summary>
            获取或设置代码页，设置此项将忽略字符集的定义
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.DeleteFilesWhenCompleted">
            <summary>
            是否在压缩操作完成后删除文件
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.LargePagesMode">
            <summary>
            是否使用大页面模式
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.WorkDir">
            <summary>
            获取或设置工作目录
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.QuiteMode">
            <summary>
            是否使用安静模式
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.OverwriteMode">
            <summary>
            是否在压缩时覆盖原文件
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.ArchieveFileName">
            <summary>
            获取或设置压缩文件名
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Native.SevenZipArgs.Files">
            <summary>
            获取或设置需要压缩的文件列表，设置此项将忽略压缩文件名
            </summary>
        </member>
        <member name="M:Win32Class.SevenZip.Native.SevenZipArgs.GenerateCommand">
            <summary>
            生成由上述参数组合的命令
            </summary>
            <returns></returns>
        </member>
        <member name="T:Win32Class.SevenZip.Native.SevenZipStateCode">
            <summary>
            指示7-zip的操作的结果
            </summary>
        </member>
        <member name="M:Win32Class.SevenZip.Native.RunCmd(System.String)">
            <summary>
            在cmd中运行命令
            </summary>
            <param name="command">要运行的命令</param>
            <returns></returns>
        </member>
        <member name="M:Win32Class.SevenZip.Native.Run7zCmd(System.String,Win32Class.SevenZip.Native.SevenZipArgs,System.Boolean)">
            <summary>
            要使用7z运行的命令
            </summary>
            <param name="sevenZipDir">7za.exe所在的目录</param>
            <param name="args">此次调用所需的参数</param>
            <returns>返回7-zip的状态码</returns>
        </member>
        <member name="P:Win32Class.SevenZip.State">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.SevenZipDirectory">
            <summary>
            7za.exe的目录
            </summary>
        </member>
        <member name="P:Win32Class.SevenZip.Failed">
            <summary>
            操作是否失败
            </summary>
        </member>
        <member name="M:Win32Class.SevenZip.Add(System.String,Win32Class.SevenZip.Native.SevenZipArgs,System.String)">
            <summary>
            将文件添加到压缩包
            </summary>
            <param name="archievefile">要添加文件的压缩包</param>
            <param name="pattern">要添加到压缩包的文件的匹配表达式</param>
            <param name="args">此次操作使用的附加参数</param>
            <returns>返回值指示本次操作是否成功</returns>
        </member>
        <member name="M:Win32Class.SevenZip.Delete(System.String,Win32Class.SevenZip.Native.SevenZipArgs,System.String)">
            <summary>
            将文件从压缩包删除
            </summary>
            <param name="archievefile">要删除文件的压缩包</param>
            <param name="args">此次删除使用的附加参数</param>
            <param name="pattern">需要删除的文件的匹配表达式</param>
            <returns>返回值指示本次操作是否成功</returns>
        </member>
        <member name="M:Win32Class.SevenZip.Extract(System.String,Win32Class.SevenZip.Native.SevenZipArgs)">
            <summary>
            将压缩包的所有文件解压到同一个文件夹。
            </summary>
            <param name="archievefile">要解压的文件</param>
            <param name="args">此次解压使用的附加参数</param>
            <returns>返回值指示本次操作是否成功</returns>
        </member>
        <member name="M:Win32Class.SevenZip.Test(System.String)">
            <summary>
            测试压缩包
            </summary>
            <param name="archievefile">要测试的压缩包</param>
            <returns>返回值指示本次操作是否成功</returns>
        </member>
        <member name="M:Win32Class.SevenZip.Update(System.String,System.String)">
            <summary>
            更新压缩包
            </summary>
            <param name="archievefile">要更新文件的压缩包</param>
            <param name="file">要更新的文件</param>
            <returns>返回值指示本次操作是否成功</returns>
        </member>
        <member name="M:Win32Class.SevenZip.ExtractWithFullPath(System.String,Win32Class.SevenZip.Native.SevenZipArgs)">
            <summary>
            按照压缩文件的目录结构解压
            </summary>
            <param name="archievefile">要解压的压缩包</param>
            <param name="args">此次解压要使用的附件参数</param>
            <returns></returns>
        </member>
        <member name="T:HandleTypes.HWND">
            <summary>
            表示一个窗口句柄
            </summary>
        </member>
        <member name="T:HandleTypes.ProcessHandle">
            <summary>
            表示一个进程句柄
            </summary>
        </member>
        <member name="P:HandleTypes.ProcessHandle.CanBeClosed">
            <summary>
            能够被CloseHandle关闭
            </summary>
        </member>
        <member name="T:HandleTypes.FilePtr">
            <summary>
            表示一个非托管文件句柄
            </summary>
        </member>
        <member name="P:HandleTypes.FilePtr.CanBeClosed">
            <summary>
            能够被CloseHandle关闭
            </summary>
        </member>
        <member name="P:HandleTypes.ModuleHandleA.CanBeClosed">
            <summary>
            能够被CloseHandle关闭
            </summary>
        </member>
        <member name="T:HandleTypes.FuncPtr">
            <summary>
            表示一个非托管函数指针
            </summary>
        </member>
        <member name="P:HandleTypes.FuncPtr.CanBeClosed">
            <summary>
            能够被CloseHandle关闭
            </summary>
        </member>
        <member name="M:HandleTypes.FuncPtr.Invoke``1(System.Object[])">
            <summary>
            使用特定的形参列表与参数调用此函数指针
            </summary>
            <typeparam name="T">形参列表</typeparam>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="T:HandleTypes.UnmanagedArray">
            <summary>
            表示一个非托管数组，数组无确定类型。
            </summary>
        </member>
        <member name="T:HandleTypes.TypedAddress`1">
            <summary>
            表示一个类型明确的使用安全上下文封装的非托管指针
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:HandleTypes.Address">
            <summary>
            表示一个使用安全上下文封装的非托管指针
            </summary>
        </member>
        <member name="M:HandleTypes.Address.Convert``1">
            <summary>
            将指针指向的对象转换成类型T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:HandleTypes.Address.Alloc``1(System.Int32)">
            <summary>
            申请指定单位的非托管内存空间
            </summary>
            <typeparam name="T"></typeparam>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:HandleTypes.Address.Alloc(System.Int32)">
            <summary>
            申请指定单位的非托管内存空间
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="T:HandleTypes.Pointer">
            <summary>
            表示一个使用不安全上下文封装的的非托管指针，此类必须从Address类或者已初始化的指针转换。赋值等操作请自行强制类型转换后进行。
            </summary>
        </member>
        <member name="T:HandleTypes.Pointer.NullPointerException">
            <summary>
            当尝试使用指向无效地址的指针时引发的异常
            </summary>
        </member>
        <member name="M:HandleTypes.Pointer.#ctor(HandleTypes.Address)">
            <summary>
            从Address创建一个Pointer。该Pointer的指针为Address对应的地址。
            </summary>
            <param name="addr">要引用的Address，如果Address引用的地址无效，则指针无法使用。</param>
        </member>
        <member name="M:HandleTypes.Pointer.GetPointer">
            <summary>
            注意：修改指针指向的地址的值，会修改Address对应的地址的值。
            </summary>
            <returns></returns>
        </member>
        <member name="M:HandleTypes.Pointer.ToString">
            <summary>
            将指针指向的地址转换成0x00000000的形式的字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HandleTypes.Pointer.AsIntPointer">
            <summary>
            将指针转换成int*类型
            </summary>
            <returns>返回一个int*</returns>
        </member>
        <member name="P:HandleTypes.ThreadHandle.CanBeClosed">
            <summary>
            能够被CloseHandle关闭
            </summary>
        </member>
        <member name="M:HandleTypes.ThreadHandle.Start(HandleTypes.Address,WinAPI.Thread.ThreadCreationFlags)">
            <summary>
            FuncPtr中有静态方法将Delegate转换成FuncPtr
            </summary>
            <param name="func">如果要使用Delegate，请使用FuncPtr.FromDelegate(Delegate)</param>
            <param name="flag"></param>
            <param name="param">请使用Address.Alloc申请足够的空间，并且使用指针赋值。</param>
            <returns></returns>
        </member>
        <member name="T:HandleTypes.HookHandle">
            <summary>
            代表一个钩子句柄
            </summary>
        </member>
        <member name="P:HandleTypes.HookHandle.CanBeClosed">
            <summary>
            能够被CloseHandle关闭
            </summary>
        </member>
        <member name="M:HandleTypes.HookHandle.Create(HandleTypes.HookHandle.HookType,HandleTypes.HookHandle.HookProc)">
            <summary>
            使用指定的类型和回调函数创建一个本地进程钩子
            </summary>
            <param name="type">钩子类型</param>
            <param name="proc">回调函数</param>
            <returns></returns>
        </member>
        <member name="M:HandleTypes.HookHandle.Create(HandleTypes.HookHandle.HookType,HandleTypes.HookHandle.HookProc,HandleTypes.ModuleHandleA,System.UInt32)">
            <summary>
            在指定的线程上创建一个回调函数在指定Dll上的钩子，线程号填0则为所有线程。
            </summary>
            <param name="type">钩子的类型</param>
            <param name="proc">回调函数</param>
            <param name="hModule">模块句柄</param>
            <param name="threadID">线程ID</param>
            <returns></returns>
        </member>
        <member name="P:HandleTypes.SnapshotHandle.CanBeClosed">
            <summary>
            能够被CloseHandle关闭
            </summary>
        </member>
        <member name="M:HandleTypes.SnapshotHandle.#ctor(WinAPI.Tool.SnapshotType,System.Int32)">
            <summary>
            创造一个指定信息的快照
            </summary>
            <param name="type"></param>
            <param name="PID">在获取由进程加载的元素时，必须指定PID</param>
            <returns></returns>
        </member>
        <member name="P:HandleTypes.FileMapHandle.CanBeClosed">
            <summary>
            能够被CloseHandle关闭
            </summary>
        </member>
        <member name="F:Windows.InjectorSelector.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Windows.InjectorSelector.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Windows.InjectorSelector.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CSharpException.MyException">
            <summary>
            自定义的异常类，有三个构造函数，可以不定义或定义异常的信息和输出的Stack信息
            </summary>
        </member>
        <member name="M:CSharpException.MyException.#ctor(System.String,System.String)">
            <summary>
            第一个参数定义异常的显示信息，第二个定义Stack信息
            </summary>
            <param name="ExpMsg"></param>
            <param name="StackInfo"></param>
        </member>
        <member name="M:CSharpException.MyException.#ctor(System.String)">
            <summary>
            定义输出的信息
            </summary>
            <param name="ExpMsg"></param>
        </member>
        <member name="M:CSharpException.MyException.#ctor">
            <summary>
            默认处理方式
            </summary>
        </member>
    </members>
</doc>
